@startuml
namespace connectionlabels {
    interface AbstractInterface  {
        - interfaceFunction() bool

    }
    class ImplementsAbstractInterface << (S,Aquamarine) >> {
        + PublicUse AbstractInterface

        - interfaceFunction() bool

    }
    class connectionlabels.AliasOfInt << (T, #FF7700) >>  {
    }
}
"connectionlabels.AliasOfInt" *-- "connectionlabels.ImplementsAbstractInterface"

"connectionlabels.AbstractInterface" <|-- "connectionlabels.ImplementsAbstractInterface"

namespace main {
    class RenderingOptionSlice << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 

    }
    class main.RenderingOptionSlice << (T, #FF7700) >>  {
    }
    class "[]parser.RenderingOption" as parserRenderingOption {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace namedimports {
    class MyType << (S,Aquamarine) >> {
    }
}
"time.Duration" *-- "namedimports.MyType"


namespace parenthesizedtypedeclarations {
    interface Bar  {
        + Bar() 

    }
    interface Foo  {
        + Foo() 

    }
}


namespace parser {
    class Alias << (S,Aquamarine) >> {
        + Name string
        + PackageName string
        + AliasOf string

    }
    class AliasSlice << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 

    }
    class ClassDiagramOptions << (S,Aquamarine) >> {
        + FileSystem afero.Fs
        + Directories []string
        + IgnoredDirectories []string
        + RenderingOptions <font color=blue>map</font>[RenderingOption]<font color=blue>interface</font>{}
        + Recursive bool

    }
    class ClassParser << (S,Aquamarine) >> {
        - renderingOptions *RenderingOptions
        - structure <font color=blue>map</font>[string]<font color=blue>map</font>[string]*Struct
        - currentPackageName string
        - allInterfaces <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allStructs <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allImports <font color=blue>map</font>[string]string
        - allAliases <font color=blue>map</font>[string]*Alias
        - allRenamedStructs <font color=blue>map</font>[string]<font color=blue>map</font>[string]string

        - parsePackage(node ast.Node) 
        - parseImports(impt *ast.ImportSpec) 
        - parseDirectory(directoryPath string) error
        - parseFileDeclarations(node ast.Decl) 
        - handleFuncDecl(decl *ast.FuncDecl) 
        - handleGenDecl(decl *ast.GenDecl) 
        - processSpec(spec ast.Spec) 
        - renderStructures(pack string, structures <font color=blue>map</font>[string]*Struct, str *LineStringBuilder) 
        - renderAliases(str *LineStringBuilder) 
        - renderStructure(structure *Struct, pack string, name string, str *LineStringBuilder, composition *LineStringBuilder, extends *LineStringBuilder, aggregations *LineStringBuilder) 
        - renderCompositions(structure *Struct, name string, composition *LineStringBuilder) 
        - renderAggregations(structure *Struct, name string, aggregations *LineStringBuilder) 
        - updatePrivateAggregations(structure *Struct, aggregationsMap <font color=blue>map</font>[string]<font color=blue>struct</font>{}) 
        - renderAggregationMap(aggregationMap <font color=blue>map</font>[string]<font color=blue>struct</font>{}, structure *Struct, aggregations *LineStringBuilder, name string) 
        - getPackageName(t string, st *Struct) string
        - renderExtends(structure *Struct, name string, extends *LineStringBuilder) 
        - renderStructMethods(structure *Struct, privateMethods *LineStringBuilder, publicMethods *LineStringBuilder) 
        - renderStructFields(structure *Struct, privateFields *LineStringBuilder, publicFields *LineStringBuilder) 
        - getOrCreateStruct(name string) *Struct
        - getStruct(structName string) *Struct

        + Render() string
        + SetRenderingOptions(ro <font color=blue>map</font>[RenderingOption]<font color=blue>interface</font>{}) error

    }
    class Field << (S,Aquamarine) >> {
        + Name string
        + Type string
        + FullType string

    }
    class Function << (S,Aquamarine) >> {
        + Name string
        + Parameters []*Field
        + ReturnValues []string
        + PackageName string
        + FullNameReturnValues []string

        + SignturesAreEqual(function *Function) bool

    }
    class LineStringBuilder << (S,Aquamarine) >> {
        + WriteLineWithDepth(depth int, str string) 

    }
    class RenderingOptions << (S,Aquamarine) >> {
        + Title string
        + Notes string
        + Aggregations bool
        + Fields bool
        + Methods bool
        + Compositions bool
        + Implementations bool
        + Aliases bool
        + ConnectionLabels bool
        + AggregatePrivateMembers bool
        + PrivateMembers bool

    }
    class Struct << (S,Aquamarine) >> {
        + PackageName string
        + Functions []*Function
        + Fields []*Field
        + Type string
        + Composition <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        + Extends <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        + Aggregations <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        + PrivateAggregations <font color=blue>map</font>[string]<font color=blue>struct</font>{}

        - addToPrivateAggregation(fType string) 

        + ImplementsInterface(inter *Struct) bool
        + AddToComposition(fType string) 
        + AddToExtends(fType string) 
        + AddToAggregation(fType string) 
        + AddField(field *ast.Field, aliases <font color=blue>map</font>[string]string) 
        + AddMethod(method *ast.Field, aliases <font color=blue>map</font>[string]string) 

    }
    class parser.AliasSlice << (T, #FF7700) >>  {
    }
    class parser.RenderingOption << (T, #FF7700) >>  {
    }
}
"strings.Builder" *-- "parser.LineStringBuilder"


namespace renderingoptions {
    class Test << (S,Aquamarine) >> {
        - integer int

        - function() 

    }
}


namespace subfolder {
    interface TestInterfaceAsField  {
    }
    interface test2  {
        - test() 

    }
}
"subfolder.TestInterfaceAsField" *-- "subfolder.test2"


namespace subfolder2 {
    class Subfolder2 << (S,Aquamarine) >> {
        + SubfolderFunction(b bool, i int) bool
        + SubfolderFunctionWithReturnListParametrized() ([]byte, []byte, []byte, error) ->>>>>>>>>>>>>>verrrrr--------------------------

    }
}

"subfolder3.SubfolderInterface" <|-- "subfolder2.Subfolder2"

namespace subfolder3 {
    interface SubfolderInterface  {
        + SubfolderFunction( bool,  int) bool

    }
}


namespace testingsupport {
    class test << (S,Aquamarine) >> {
        - field int
        - field2 TestComplicatedAlias

        - test() 

    }
    class testingsupport.TestComplicatedAlias << (T, #FF7700) >>  {
    }
    class testingsupport.myInt << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(strings.Builder) bool" as fontcolorbluefuncfontstringsBuilderbool {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"subfolder.test2" <|-- "testingsupport.test"

"__builtin__.int" #.. "connectionlabels.AliasOfInt"
"__builtin__.int" #.. "parser.RenderingOption"
"__builtin__.int" #.. "testingsupport.myInt"
"main.parserRenderingOption" #.. "main.RenderingOptionSlice"
"parser.[]Alias" #.. "parser.AliasSlice"
"testingsupport.fontcolorbluefuncfontstringsBuilderbool" #.. "testingsupport.TestComplicatedAlias"
@enduml
